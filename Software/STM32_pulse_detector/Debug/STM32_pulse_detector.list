
STM32_pulse_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a70  08004a70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a78  08004a78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004a8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004a8c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e78  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e8  00000000  00000000  00030eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002595b  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c78  00000000  00000000  0005a983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf9a  00000000  00000000  0006b5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  001665e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a18 	.word	0x08004a18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004a18 	.word	0x08004a18

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fbc7 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f810 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f9ba 	bl	8000894 <MX_GPIO_Init>
  MX_COMP1_Init();
 8000520:	f000 f872 	bl	8000608 <MX_COMP1_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f896 	bl	8000654 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000528:	f000 f8de 	bl	80006e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE);
HAL_TIM_OnePulse_Start(&htim1, 1);
 800052c:	2101      	movs	r1, #1
 800052e:	4802      	ldr	r0, [pc, #8]	; (8000538 <main+0x28>)
 8000530:	f002 fb22 	bl	8002b78 <HAL_TIM_OnePulse_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x24>
 8000536:	bf00      	nop
 8000538:	200000dc 	.word	0x200000dc

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0a8      	sub	sp, #160	; 0xa0
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000546:	2238      	movs	r2, #56	; 0x38
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 fa5c 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2254      	movs	r2, #84	; 0x54
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fa4e 	bl	8004a08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056c:	2000      	movs	r0, #0
 800056e:	f001 f9bd 	bl	80018ec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	2301      	movs	r3, #1
 8000574:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	2303      	movs	r3, #3
 8000584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000588:	2306      	movs	r3, #6
 800058a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058e:	2355      	movs	r3, #85	; 0x55
 8000590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fa52 	bl	8001a54 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005b6:	f000 f9dd 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d2:	2104      	movs	r1, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fd55 	bl	8002084 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005e0:	f000 f9c8 	bl	8000974 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80005e4:	2320      	movs	r3, #32
 80005e6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ff64 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f9bb 	bl	8000974 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	37a0      	adds	r7, #160	; 0xa0
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_COMP1_Init+0x44>)
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <MX_COMP1_Init+0x48>)
 8000610:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_COMP1_Init+0x44>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_IO2;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_COMP1_Init+0x44>)
 800061a:	2270      	movs	r2, #112	; 0x70
 800061c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_COMP1_Init+0x44>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_10MV;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_COMP1_Init+0x44>)
 8000626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_COMP1_Init+0x44>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_COMP1_Init+0x44>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_COMP1_Init+0x44>)
 800063a:	f000 fcf5 	bl	8001028 <HAL_COMP_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8000644:	f000 f996 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	40010200 	.word	0x40010200

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f003 fc08 	bl	8003eac <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f967 	bl	8000974 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	f004 f8bf 	bl	800482c <HAL_UARTEx_SetTxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006b4:	f000 f95e 	bl	8000974 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 f8f4 	bl	80048a8 <HAL_UARTEx_SetRxFifoThreshold>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006c6:	f000 f955 	bl	8000974 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f004 f875 	bl	80047ba <HAL_UARTEx_DisableFifoMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006d6:	f000 f94d 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000004c 	.word	0x2000004c
 80006e4:	40008000 	.word	0x40008000

080006e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0a0      	sub	sp, #128	; 0x80
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f968 	bl	8004a08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000738:	4b54      	ldr	r3, [pc, #336]	; (800088c <MX_TIM1_Init+0x1a4>)
 800073a:	4a55      	ldr	r2, [pc, #340]	; (8000890 <MX_TIM1_Init+0x1a8>)
 800073c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170;
 800073e:	4b53      	ldr	r3, [pc, #332]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000740:	22aa      	movs	r2, #170	; 0xaa
 8000742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000744:	4b51      	ldr	r3, [pc, #324]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000746:	2210      	movs	r2, #16
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <MX_TIM1_Init+0x1a4>)
 800074c:	2202      	movs	r2, #2
 800074e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b4e      	ldr	r3, [pc, #312]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000756:	4b4d      	ldr	r3, [pc, #308]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_TIM1_Init+0x1a4>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000762:	484a      	ldr	r0, [pc, #296]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000764:	f002 f8f6 	bl	8002954 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800076e:	f000 f901 	bl	8000974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000778:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800077c:	4619      	mov	r1, r3
 800077e:	4843      	ldr	r0, [pc, #268]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000780:	f002 fb88 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800078a:	f000 f8f3 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078e:	483f      	ldr	r0, [pc, #252]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000790:	f002 f937 	bl	8002a02 <HAL_TIM_PWM_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800079a:	f000 f8eb 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800079e:	2108      	movs	r1, #8
 80007a0:	483a      	ldr	r0, [pc, #232]	; (800088c <MX_TIM1_Init+0x1a4>)
 80007a2:	f002 f98f 	bl	8002ac4 <HAL_TIM_OnePulse_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007ac:	f000 f8e2 	bl	8000974 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007b0:	2306      	movs	r3, #6
 80007b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80007b4:	2370      	movs	r3, #112	; 0x70
 80007b6:	663b      	str	r3, [r7, #96]	; 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80007b8:	2300      	movs	r3, #0
 80007ba:	667b      	str	r3, [r7, #100]	; 0x64
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	66bb      	str	r3, [r7, #104]	; 0x68
  sSlaveConfig.TriggerFilter = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007c8:	4619      	mov	r1, r3
 80007ca:	4830      	ldr	r0, [pc, #192]	; (800088c <MX_TIM1_Init+0x1a4>)
 80007cc:	f002 fc74 	bl	80030b8 <HAL_TIM_SlaveConfigSynchro>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80007d6:	f000 f8cd 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ea:	4619      	mov	r1, r3
 80007ec:	4827      	ldr	r0, [pc, #156]	; (800088c <MX_TIM1_Init+0x1a4>)
 80007ee:	f003 fa15 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80007f8:	f000 f8bc 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	; 0x60
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	481a      	ldr	r0, [pc, #104]	; (800088c <MX_TIM1_Init+0x1a4>)
 8000822:	f002 fa27 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800082c:	f000 f8a2 	bl	8000974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM1_Init+0x1a4>)
 800086e:	f003 fa6b 	bl	8003d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8000878:	f000 f87c 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM1_Init+0x1a4>)
 800087e:	f000 f96d 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3780      	adds	r7, #128	; 0x80
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000dc 	.word	0x200000dc
 8000890:	40012c00 	.word	0x40012c00

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0xd4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 ffaf 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_GPIO_Init+0xd8>)
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0xdc>)
 800092c:	f000 fe20 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f000 fe11 	bl	8001570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2028      	movs	r0, #40	; 0x28
 8000954:	f000 fdd7 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000958:	2028      	movs	r0, #40	; 0x28
 800095a:	f000 fdee 	bl	800153a <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	10110000 	.word	0x10110000
 8000970:	48000800 	.word	0x48000800

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6613      	str	r3, [r2, #96]	; 0x60
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6593      	str	r3, [r2, #88]	; 0x58
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009b6:	f001 f83d 	bl	8001a34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <HAL_COMP_MspInit+0x80>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d129      	bne.n	8000a3e <HAL_COMP_MspInit+0x76>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_COMP_MspInit+0x84>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_COMP_MspInit+0x84>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_COMP_MspInit+0x84>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PA0     ------> COMP1_INM
    PA1     ------> COMP1_INP
    PA6     ------> COMP1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a02:	2303      	movs	r3, #3
 8000a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	2303      	movs	r3, #3
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fdaa 	bl	8001570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fd99 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010200 	.word	0x40010200
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x7c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d128      	bne.n	8000ac4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x80>)
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0x80>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0x80>)
 8000a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x80>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0x80>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x80>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 fd56 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40008000 	.word	0x40008000
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_TIM_Base_MspInit+0x7c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d127      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_TIM_Base_MspInit+0x80>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_TIM_Base_MspInit+0x80>)
 8000afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_TIM_Base_MspInit+0x80>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_TIM_Base_MspInit+0x80>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_TIM_Base_MspInit+0x80>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_TIM_Base_MspInit+0x80>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b26:	2310      	movs	r3, #16
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b36:	2302      	movs	r3, #2
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_TIM_Base_MspInit+0x84>)
 8000b42:	f000 fd15 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000800 	.word	0x48000800

08000b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <HAL_TIM_MspPostInit+0x64>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d11b      	bne.n	8000bb6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_TIM_MspPostInit+0x6c>)
 8000bb2:	f000 fcdd 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40012c00 	.word	0x40012c00
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48000800 	.word	0x48000800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f898 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c28:	f000 fe3c 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7e:	f7ff ffd7 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fe9d 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc43 	bl	8000510 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c98:	08004a80 	.word	0x08004a80
  ldr r2, =_sbss
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca0:	2000012c 	.word	0x2000012c

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 fc1d 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f80e 	bl	8000cd8 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fe5a 	bl	8000980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d022      	beq.n	8000d32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_InitTick+0x6c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fc28 	bl	8001556 <HAL_SYSTICK_Config>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10f      	bne.n	8000d2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d809      	bhi.n	8000d26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	f000 fbf4 	bl	8001506 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0x70>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e007      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e004      	b.n	8000d36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	20000128 	.word	0x20000128
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000128 	.word	0x20000128

08000d88 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4904      	ldr	r1, [pc, #16]	; (8000da8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	600b      	str	r3, [r1, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40010400 	.word	0x40010400

08000dac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <LL_EXTI_EnableIT_32_63+0x20>)
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	4904      	ldr	r1, [pc, #16]	; (8000dcc <LL_EXTI_EnableIT_32_63+0x20>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	620b      	str	r3, [r1, #32]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4904      	ldr	r1, [pc, #16]	; (8000df4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40010400 	.word	0x40010400

08000df8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <LL_EXTI_DisableIT_32_63+0x24>)
 8000e02:	6a1a      	ldr	r2, [r3, #32]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4904      	ldr	r1, [pc, #16]	; (8000e1c <LL_EXTI_DisableIT_32_63+0x24>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	620b      	str	r3, [r1, #32]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40010400 	.word	0x40010400

08000e20 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4904      	ldr	r1, [pc, #16]	; (8000e40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]

}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40010400 	.word	0x40010400

08000e44 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e50:	4904      	ldr	r1, [pc, #16]	; (8000e64 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4904      	ldr	r1, [pc, #16]	; (8000e8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40010400 	.word	0x40010400

08000e90 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	4904      	ldr	r1, [pc, #16]	; (8000eb4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]

}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40010400 	.word	0x40010400

08000edc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ee8:	4904      	ldr	r1, [pc, #16]	; (8000efc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40010400 	.word	0x40010400

08000f00 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	608b      	str	r3, [r1, #8]

}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40010400 	.word	0x40010400

08000f28 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	4904      	ldr	r1, [pc, #16]	; (8000f4c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40010400 	.word	0x40010400

08000f50 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60cb      	str	r3, [r1, #12]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40010400 	.word	0x40010400

08000f74 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40010400 	.word	0x40010400

08000f98 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4904      	ldr	r1, [pc, #16]	; (8000fbc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	60cb      	str	r3, [r1, #12]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4904      	ldr	r1, [pc, #16]	; (8000fe4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6153      	str	r3, [r2, #20]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40010400 	.word	0x40010400

08001008 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	77fb      	strb	r3, [r7, #31]
 8001042:	e180      	b.n	8001346 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800104e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001052:	d102      	bne.n	800105a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	77fb      	strb	r3, [r7, #31]
 8001058:	e175      	b.n	8001346 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7f5b      	ldrb	r3, [r3, #29]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d108      	bne.n	8001076 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fca9 	bl	80009c8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001080:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b98      	ldr	r3, [pc, #608]	; (8001308 <HAL_COMP_Init+0x2e0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	6979      	ldr	r1, [r7, #20]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <HAL_COMP_Init+0xc6>
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d112      	bne.n	80010ee <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010c8:	4b90      	ldr	r3, [pc, #576]	; (800130c <HAL_COMP_Init+0x2e4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	099b      	lsrs	r3, r3, #6
 80010ce:	4a90      	ldr	r2, [pc, #576]	; (8001310 <HAL_COMP_Init+0x2e8>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	099a      	lsrs	r2, r3, #6
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80010e0:	e002      	b.n	80010e8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a88      	ldr	r2, [pc, #544]	; (8001314 <HAL_COMP_Init+0x2ec>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d028      	beq.n	800114a <HAL_COMP_Init+0x122>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a86      	ldr	r2, [pc, #536]	; (8001318 <HAL_COMP_Init+0x2f0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d020      	beq.n	8001144 <HAL_COMP_Init+0x11c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a85      	ldr	r2, [pc, #532]	; (800131c <HAL_COMP_Init+0x2f4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d018      	beq.n	800113e <HAL_COMP_Init+0x116>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a83      	ldr	r2, [pc, #524]	; (8001320 <HAL_COMP_Init+0x2f8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d010      	beq.n	8001138 <HAL_COMP_Init+0x110>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a82      	ldr	r2, [pc, #520]	; (8001324 <HAL_COMP_Init+0x2fc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d008      	beq.n	8001132 <HAL_COMP_Init+0x10a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a80      	ldr	r2, [pc, #512]	; (8001328 <HAL_COMP_Init+0x300>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_COMP_Init+0x106>
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <HAL_COMP_Init+0x126>
 800112e:	2302      	movs	r3, #2
 8001130:	e00d      	b.n	800114e <HAL_COMP_Init+0x126>
 8001132:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001136:	e00a      	b.n	800114e <HAL_COMP_Init+0x126>
 8001138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113c:	e007      	b.n	800114e <HAL_COMP_Init+0x126>
 800113e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001142:	e004      	b.n	800114e <HAL_COMP_Init+0x126>
 8001144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001148:	e001      	b.n	800114e <HAL_COMP_Init+0x126>
 800114a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800114e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80b6 	beq.w	80012ca <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	d011      	beq.n	800118e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6e      	ldr	r2, [pc, #440]	; (8001328 <HAL_COMP_Init+0x300>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d004      	beq.n	800117e <HAL_COMP_Init+0x156>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a6c      	ldr	r2, [pc, #432]	; (800132c <HAL_COMP_Init+0x304>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d103      	bne.n	8001186 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800117e:	6938      	ldr	r0, [r7, #16]
 8001180:	f7ff feac 	bl	8000edc <LL_EXTI_EnableRisingTrig_32_63>
 8001184:	e014      	b.n	80011b0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8001186:	6938      	ldr	r0, [r7, #16]
 8001188:	f7ff fe96 	bl	8000eb8 <LL_EXTI_EnableRisingTrig_0_31>
 800118c:	e010      	b.n	80011b0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a65      	ldr	r2, [pc, #404]	; (8001328 <HAL_COMP_Init+0x300>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d004      	beq.n	80011a2 <HAL_COMP_Init+0x17a>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a63      	ldr	r2, [pc, #396]	; (800132c <HAL_COMP_Init+0x304>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d103      	bne.n	80011aa <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80011a2:	6938      	ldr	r0, [r7, #16]
 80011a4:	f7ff fec0 	bl	8000f28 <LL_EXTI_DisableRisingTrig_32_63>
 80011a8:	e002      	b.n	80011b0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80011aa:	6938      	ldr	r0, [r7, #16]
 80011ac:	f7ff fea8 	bl	8000f00 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d011      	beq.n	80011e0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a59      	ldr	r2, [pc, #356]	; (8001328 <HAL_COMP_Init+0x300>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d004      	beq.n	80011d0 <HAL_COMP_Init+0x1a8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a58      	ldr	r2, [pc, #352]	; (800132c <HAL_COMP_Init+0x304>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d103      	bne.n	80011d8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80011d0:	6938      	ldr	r0, [r7, #16]
 80011d2:	f7ff fecf 	bl	8000f74 <LL_EXTI_EnableFallingTrig_32_63>
 80011d6:	e014      	b.n	8001202 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80011d8:	6938      	ldr	r0, [r7, #16]
 80011da:	f7ff feb9 	bl	8000f50 <LL_EXTI_EnableFallingTrig_0_31>
 80011de:	e010      	b.n	8001202 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_COMP_Init+0x300>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d004      	beq.n	80011f4 <HAL_COMP_Init+0x1cc>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_COMP_Init+0x304>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d103      	bne.n	80011fc <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80011f4:	6938      	ldr	r0, [r7, #16]
 80011f6:	f7ff fee3 	bl	8000fc0 <LL_EXTI_DisableFallingTrig_32_63>
 80011fa:	e002      	b.n	8001202 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80011fc:	6938      	ldr	r0, [r7, #16]
 80011fe:	f7ff fecb 	bl	8000f98 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a48      	ldr	r2, [pc, #288]	; (8001328 <HAL_COMP_Init+0x300>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d004      	beq.n	8001216 <HAL_COMP_Init+0x1ee>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_COMP_Init+0x304>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d103      	bne.n	800121e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8001216:	6938      	ldr	r0, [r7, #16]
 8001218:	f7ff fef6 	bl	8001008 <LL_EXTI_ClearFlag_32_63>
 800121c:	e002      	b.n	8001224 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800121e:	6938      	ldr	r0, [r7, #16]
 8001220:	f7ff fee2 	bl	8000fe8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a3c      	ldr	r2, [pc, #240]	; (8001328 <HAL_COMP_Init+0x300>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d004      	beq.n	8001244 <HAL_COMP_Init+0x21c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a3b      	ldr	r2, [pc, #236]	; (800132c <HAL_COMP_Init+0x304>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d103      	bne.n	800124c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8001244:	6938      	ldr	r0, [r7, #16]
 8001246:	f7ff fdfd 	bl	8000e44 <LL_EXTI_EnableEvent_32_63>
 800124a:	e014      	b.n	8001276 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800124c:	6938      	ldr	r0, [r7, #16]
 800124e:	f7ff fde7 	bl	8000e20 <LL_EXTI_EnableEvent_0_31>
 8001252:	e010      	b.n	8001276 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a33      	ldr	r2, [pc, #204]	; (8001328 <HAL_COMP_Init+0x300>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d004      	beq.n	8001268 <HAL_COMP_Init+0x240>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_COMP_Init+0x304>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d103      	bne.n	8001270 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8001268:	6938      	ldr	r0, [r7, #16]
 800126a:	f7ff fe11 	bl	8000e90 <LL_EXTI_DisableEvent_32_63>
 800126e:	e002      	b.n	8001276 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8001270:	6938      	ldr	r0, [r7, #16]
 8001272:	f7ff fdf9 	bl	8000e68 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d011      	beq.n	80012a6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a28      	ldr	r2, [pc, #160]	; (8001328 <HAL_COMP_Init+0x300>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_COMP_Init+0x26e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_COMP_Init+0x304>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d103      	bne.n	800129e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8001296:	6938      	ldr	r0, [r7, #16]
 8001298:	f7ff fd88 	bl	8000dac <LL_EXTI_EnableIT_32_63>
 800129c:	e04b      	b.n	8001336 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800129e:	6938      	ldr	r0, [r7, #16]
 80012a0:	f7ff fd72 	bl	8000d88 <LL_EXTI_EnableIT_0_31>
 80012a4:	e047      	b.n	8001336 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_COMP_Init+0x300>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d004      	beq.n	80012ba <HAL_COMP_Init+0x292>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_COMP_Init+0x304>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d103      	bne.n	80012c2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	f7ff fd9c 	bl	8000df8 <LL_EXTI_DisableIT_32_63>
 80012c0:	e039      	b.n	8001336 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80012c2:	6938      	ldr	r0, [r7, #16]
 80012c4:	f7ff fd84 	bl	8000dd0 <LL_EXTI_DisableIT_0_31>
 80012c8:	e035      	b.n	8001336 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <HAL_COMP_Init+0x300>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d004      	beq.n	80012de <HAL_COMP_Init+0x2b6>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_COMP_Init+0x304>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d103      	bne.n	80012e6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80012de:	6938      	ldr	r0, [r7, #16]
 80012e0:	f7ff fdd6 	bl	8000e90 <LL_EXTI_DisableEvent_32_63>
 80012e4:	e002      	b.n	80012ec <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80012e6:	6938      	ldr	r0, [r7, #16]
 80012e8:	f7ff fdbe 	bl	8000e68 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_COMP_Init+0x300>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d004      	beq.n	8001300 <HAL_COMP_Init+0x2d8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_COMP_Init+0x304>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d117      	bne.n	8001330 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8001300:	6938      	ldr	r0, [r7, #16]
 8001302:	f7ff fd79 	bl	8000df8 <LL_EXTI_DisableIT_32_63>
 8001306:	e016      	b.n	8001336 <HAL_COMP_Init+0x30e>
 8001308:	ff007e0f 	.word	0xff007e0f
 800130c:	20000000 	.word	0x20000000
 8001310:	053e2d63 	.word	0x053e2d63
 8001314:	40010200 	.word	0x40010200
 8001318:	40010204 	.word	0x40010204
 800131c:	40010208 	.word	0x40010208
 8001320:	4001020c 	.word	0x4001020c
 8001324:	40010210 	.word	0x40010210
 8001328:	40010214 	.word	0x40010214
 800132c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001330:	6938      	ldr	r0, [r7, #16]
 8001332:	f7ff fd4d 	bl	8000dd0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7f5b      	ldrb	r3, [r3, #29]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8001346:	7ffb      	ldrb	r3, [r7, #31]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff40 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff90 	bl	8001444 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff33 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa4 	bl	80014ac <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800157e:	e15a      	b.n	8001836 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 814c 	beq.w	8001830 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00b      	beq.n	80015b8 <HAL_GPIO_Init+0x48>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ac:	2b11      	cmp	r3, #17
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0xea>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b12      	cmp	r3, #18
 8001658:	d123      	bne.n	80016a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0203 	and.w	r2, r3, #3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a6 	beq.w	8001830 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_GPIO_Init+0x2e4>)
 80016e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e8:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_GPIO_Init+0x2e4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6613      	str	r3, [r2, #96]	; 0x60
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_GPIO_Init+0x2e4>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fc:	4a56      	ldr	r2, [pc, #344]	; (8001858 <HAL_GPIO_Init+0x2e8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001726:	d01f      	beq.n	8001768 <HAL_GPIO_Init+0x1f8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4c      	ldr	r2, [pc, #304]	; (800185c <HAL_GPIO_Init+0x2ec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d019      	beq.n	8001764 <HAL_GPIO_Init+0x1f4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_GPIO_Init+0x2f0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d013      	beq.n	8001760 <HAL_GPIO_Init+0x1f0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x2f4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_GPIO_Init+0x1ec>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a49      	ldr	r2, [pc, #292]	; (8001868 <HAL_GPIO_Init+0x2f8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x1e8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a48      	ldr	r2, [pc, #288]	; (800186c <HAL_GPIO_Init+0x2fc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_GPIO_Init+0x1e4>
 8001750:	2305      	movs	r3, #5
 8001752:	e00a      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001754:	2306      	movs	r3, #6
 8001756:	e008      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001758:	2304      	movs	r3, #4
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 800175c:	2303      	movs	r3, #3
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001768:	2300      	movs	r3, #0
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177a:	4937      	ldr	r1, [pc, #220]	; (8001858 <HAL_GPIO_Init+0x2e8>)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_GPIO_Init+0x300>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ac:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_GPIO_Init+0x300>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x300>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d6:	4a26      	ldr	r2, [pc, #152]	; (8001870 <HAL_GPIO_Init+0x300>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_GPIO_Init+0x300>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <HAL_GPIO_Init+0x300>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_GPIO_Init+0x300>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_GPIO_Init+0x300>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f ae9d 	bne.w	8001580 <HAL_GPIO_Init+0x10>
  }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48001000 	.word	0x48001000
 800186c:	48001400 	.word	0x48001400
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001890:	e002      	b.n	8001898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f806 	bl	80018d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d141      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018fa:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001906:	d131      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800190e:	4a46      	ldr	r2, [pc, #280]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001914:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001918:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001920:	4a41      	ldr	r2, [pc, #260]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001928:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2232      	movs	r2, #50	; 0x32
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193e:	e002      	b.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3b01      	subs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	d102      	bne.n	800195a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f2      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800195a:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001966:	d158      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e057      	b.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001972:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800197c:	e04d      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001984:	d141      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d131      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2232      	movs	r2, #50	; 0x32
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9b      	lsrs	r3, r3, #18
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ca:	e002      	b.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019de:	d102      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f2      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d112      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e011      	b.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a08:	e007      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a42:	6093      	str	r3, [r2, #8]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e308      	b.n	8002078 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d075      	beq.n	8001b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a72:	4ba3      	ldr	r3, [pc, #652]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3e>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05b      	beq.n	8001b5c <HAL_RCC_OscConfig+0x108>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d157      	bne.n	8001b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e2e3      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x74>
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a8a      	ldr	r2, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001aec:	4b84      	ldr	r3, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a83      	ldr	r2, [pc, #524]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a80      	ldr	r2, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f930 	bl	8000d70 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f92c 	bl	8000d70 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e2a8      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xc0>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f91c 	bl	8000d70 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f918 	bl	8000d70 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e294      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe8>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d075      	beq.n	8001c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b74:	4b62      	ldr	r3, [pc, #392]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x136>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_OscConfig+0x13c>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d11f      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b90:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x154>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e267      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	4952      	ldr	r1, [pc, #328]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bbc:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <HAL_RCC_OscConfig+0x2b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f889 	bl	8000cd8 <HAL_InitTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d043      	beq.n	8001c54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e253      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f8c4 	bl	8000d70 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff f8c0 	bl	8000d70 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e23c      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	061b      	lsls	r3, r3, #24
 8001c18:	4939      	ldr	r1, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
 8001c1e:	e01a      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a36      	ldr	r2, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f8a0 	bl	8000d70 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f89c 	bl	8000d70 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e218      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1e0>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d03c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f879 	bl	8000d70 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c82:	f7ff f875 	bl	8000d70 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1f1      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0ef      	beq.n	8001c82 <HAL_RCC_OscConfig+0x22e>
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f85c 	bl	8000d70 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f858 	bl	8000d70 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1d4      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ef      	bne.n	8001cbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ab 	beq.w	8001e40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2b4>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e005      	b.n	8001d0a <HAL_RCC_OscConfig+0x2b6>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	20000004 	.word	0x20000004
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4baf      	ldr	r3, [pc, #700]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4aae      	ldr	r2, [pc, #696]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1a:	4bac      	ldr	r3, [pc, #688]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	4ba9      	ldr	r3, [pc, #676]	; (8001fd0 <HAL_RCC_OscConfig+0x57c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d36:	4ba6      	ldr	r3, [pc, #664]	; (8001fd0 <HAL_RCC_OscConfig+0x57c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4aa5      	ldr	r2, [pc, #660]	; (8001fd0 <HAL_RCC_OscConfig+0x57c>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff f815 	bl	8000d70 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff f811 	bl	8000d70 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e18d      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b9c      	ldr	r3, [pc, #624]	; (8001fd0 <HAL_RCC_OscConfig+0x57c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_RCC_OscConfig+0x32e>
 8001d70:	4b96      	ldr	r3, [pc, #600]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a95      	ldr	r2, [pc, #596]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d80:	e024      	b.n	8001dcc <HAL_RCC_OscConfig+0x378>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d110      	bne.n	8001dac <HAL_RCC_OscConfig+0x358>
 8001d8a:	4b90      	ldr	r3, [pc, #576]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	4a8e      	ldr	r2, [pc, #568]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9a:	4b8c      	ldr	r3, [pc, #560]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	4a8a      	ldr	r2, [pc, #552]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x378>
 8001dac:	4b87      	ldr	r3, [pc, #540]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	4a86      	ldr	r2, [pc, #536]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dbc:	4b83      	ldr	r3, [pc, #524]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a82      	ldr	r2, [pc, #520]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7fe ffcc 	bl	8000d70 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe ffc8 	bl	8000d70 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e142      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ed      	beq.n	8001ddc <HAL_RCC_OscConfig+0x388>
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7fe ffb5 	bl	8000d70 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ffb1 	bl	8000d70 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e12b      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ed      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a64      	ldr	r2, [pc, #400]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d03c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e54:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e5a:	4a5c      	ldr	r2, [pc, #368]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7fe ff84 	bl	8000d70 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6c:	f7fe ff80 	bl	8000d70 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0fc      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e7e:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ef      	beq.n	8001e6c <HAL_RCC_OscConfig+0x418>
 8001e8c:	e01b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe ff67 	bl	8000d70 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea6:	f7fe ff63 	bl	8000d70 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0df      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb8:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ef      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80d3 	beq.w	8002076 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	f000 808d 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d15a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe ff3d 	bl	8000d70 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe ff39 	bl	8000d70 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0b5      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x580>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6a11      	ldr	r1, [r2, #32]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f28:	3a01      	subs	r2, #1
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f32:	0212      	lsls	r2, r2, #8
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f3a:	0852      	lsrs	r2, r2, #1
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	0552      	lsls	r2, r2, #21
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	0652      	lsls	r2, r2, #25
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f52:	06d2      	lsls	r2, r2, #27
 8001f54:	430a      	orrs	r2, r1
 8001f56:	491d      	ldr	r1, [pc, #116]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fefc 	bl	8000d70 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fef8 	bl	8000d70 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e074      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x528>
 8001f9a:	e06c      	b.n	8002076 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_RCC_OscConfig+0x578>)
 8001fba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fed4 	bl	8000d70 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	e00e      	b.n	8001fea <HAL_RCC_OscConfig+0x596>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe feca 	bl	8000d70 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e046      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_OscConfig+0x62c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x584>
 8001ff6:	e03e      	b.n	8002076 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e039      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_OscConfig+0x62c>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d12c      	bne.n	8002072 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	3b01      	subs	r3, #1
 8002024:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d123      	bne.n	8002072 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d11b      	bne.n	8002072 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d113      	bne.n	8002072 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d109      	bne.n	8002072 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	3b01      	subs	r3, #1
 800206c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e11e      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d910      	bls.n	80020cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b8e      	ldr	r3, [pc, #568]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 020f 	bic.w	r2, r3, #15
 80020b2:	498c      	ldr	r1, [pc, #560]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b8a      	ldr	r3, [pc, #552]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e106      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d073      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d129      	bne.n	8002134 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0f4      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020f0:	f000 f99e 	bl	8002430 <RCC_GetSysClockFreqFromPLLSource>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4a7c      	ldr	r2, [pc, #496]	; (80022ec <HAL_RCC_ClockConfig+0x268>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d93f      	bls.n	800217e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020fe:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002112:	2b00      	cmp	r3, #0
 8002114:	d033      	beq.n	800217e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d12f      	bne.n	800217e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800211e:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002126:	4a70      	ldr	r2, [pc, #448]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e024      	b.n	800217e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d107      	bne.n	800214c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0c6      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214c:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0be      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800215c:	f000 f8ce 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8002160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4a61      	ldr	r2, [pc, #388]	; (80022ec <HAL_RCC_ClockConfig+0x268>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d909      	bls.n	800217e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002172:	4a5d      	ldr	r2, [pc, #372]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b5a      	ldr	r3, [pc, #360]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4957      	ldr	r1, [pc, #348]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002190:	f7fe fdee 	bl	8000d70 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7fe fdea 	bl	8000d70 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e095      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d023      	beq.n	8002214 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a42      	ldr	r2, [pc, #264]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80021de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021f0:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021f8:	4a3b      	ldr	r2, [pc, #236]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4936      	ldr	r1, [pc, #216]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
 8002212:	e008      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d105      	bne.n	8002226 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a32      	ldr	r2, [pc, #200]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 8002220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002224:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d21d      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 020f 	bic.w	r2, r3, #15
 800223c:	4929      	ldr	r1, [pc, #164]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002244:	f7fe fd94 	bl	8000d70 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7fe fd90 	bl	8000d70 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e03b      	b.n	80022da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d1ed      	bne.n	800224c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4917      	ldr	r1, [pc, #92]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490f      	ldr	r1, [pc, #60]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ae:	f000 f825 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	490c      	ldr	r1, [pc, #48]	; (80022f0 <HAL_RCC_ClockConfig+0x26c>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x270>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x274>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fd00 	bl	8000cd8 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	04c4b400 	.word	0x04c4b400
 80022f0:	08004a30 	.word	0x08004a30
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002302:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d102      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	e047      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d102      	bne.n	8002326 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	e03e      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d136      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3301      	adds	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d10c      	bne.n	800236a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	68d2      	ldr	r2, [r2, #12]
 800235c:	0a12      	lsrs	r2, r2, #8
 800235e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
      break;
 8002368:	e00c      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800236a:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	0a12      	lsrs	r2, r2, #8
 8002378:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
      break;
 8002382:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0e5b      	lsrs	r3, r3, #25
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e001      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023a4:	693b      	ldr	r3, [r7, #16]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	016e3600 	.word	0x016e3600

080023c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023dc:	f7ff fff0 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08004a40 	.word	0x08004a40

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002408:	f7ff ffda 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0adb      	lsrs	r3, r3, #11
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_RCC_GetPCLK2Freq+0x28>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	08004a40 	.word	0x08004a40

08002430 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3301      	adds	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d10c      	bne.n	800246e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800245e:	68d2      	ldr	r2, [r2, #12]
 8002460:	0a12      	lsrs	r2, r2, #8
 8002462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
    break;
 800246c:	e00c      	b.n	8002488 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	0a12      	lsrs	r2, r2, #8
 800247c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
    break;
 8002486:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0e5b      	lsrs	r3, r3, #25
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	3301      	adds	r3, #1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024a2:	687b      	ldr	r3, [r7, #4]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	016e3600 	.word	0x016e3600
 80024b8:	00f42400 	.word	0x00f42400

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c4:	2300      	movs	r3, #0
 80024c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024c8:	2300      	movs	r3, #0
 80024ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8098 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a39      	ldr	r2, [pc, #228]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002512:	f7fe fc2d 	bl	8000d70 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002518:	e009      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe fc29 	bl	8000d70 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d902      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	74fb      	strb	r3, [r7, #19]
        break;
 800252c:	e005      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800252e:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0ef      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d159      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01e      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	d019      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002566:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fbe9 	bl	8000d70 <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a0:	e00b      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fbe5 	bl	8000d70 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d902      	bls.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	74fb      	strb	r3, [r7, #19]
            break;
 80025b8:	e006      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ec      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025e4:	e008      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
 80025ea:	e005      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f8:	7c7b      	ldrb	r3, [r7, #17]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4baf      	ldr	r3, [pc, #700]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4aae      	ldr	r2, [pc, #696]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002616:	4ba9      	ldr	r3, [pc, #676]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0203 	bic.w	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	49a5      	ldr	r1, [pc, #660]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002638:	4ba0      	ldr	r3, [pc, #640]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 020c 	bic.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	499d      	ldr	r1, [pc, #628]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265a:	4b98      	ldr	r3, [pc, #608]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4994      	ldr	r1, [pc, #592]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800267c:	4b8f      	ldr	r3, [pc, #572]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	498c      	ldr	r1, [pc, #560]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800269e:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4983      	ldr	r1, [pc, #524]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c0:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	497b      	ldr	r1, [pc, #492]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	4972      	ldr	r1, [pc, #456]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002704:	4b6d      	ldr	r3, [pc, #436]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	496a      	ldr	r1, [pc, #424]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	4961      	ldr	r1, [pc, #388]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002748:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	4959      	ldr	r1, [pc, #356]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4950      	ldr	r1, [pc, #320]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800278c:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4948      	ldr	r1, [pc, #288]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027aa:	d105      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	493a      	ldr	r1, [pc, #232]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e2:	d105      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	492c      	ldr	r1, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281a:	d105      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002826:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	491e      	ldr	r1, [pc, #120]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002852:	d105      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4910      	ldr	r1, [pc, #64]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4902      	ldr	r1, [pc, #8]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ba:	e001      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028bc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c8:	d105      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d015      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	4917      	ldr	r1, [pc, #92]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800291c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	4909      	ldr	r1, [pc, #36]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002938:	d105      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002944:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002946:	7cbb      	ldrb	r3, [r7, #18]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e049      	b.n	80029fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f8aa 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fbd2 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e049      	b.n	8002aa8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d106      	bne.n	8002a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f841 	bl	8002ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f000 fb7b 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e041      	b.n	8002b5c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f839 	bl	8002b64 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f000 fb19 	bl	800313c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0208 	bic.w	r2, r2, #8
 8002b18:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d108      	bne.n	8002bba <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ba8:	7bbb      	ldrb	r3, [r7, #14]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bae:	7b7b      	ldrb	r3, [r7, #13]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bb4:	7b3b      	ldrb	r3, [r7, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e049      	b.n	8002c52 <HAL_TIM_OnePulse_Start+0xda>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fff2 	bl	8003bd0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 ffeb 	bl	8003bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_TIM_OnePulse_Start+0xe4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_TIM_OnePulse_Start+0xbe>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_TIM_OnePulse_Start+0xe8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIM_OnePulse_Start+0xbe>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_TIM_OnePulse_Start+0xec>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIM_OnePulse_Start+0xbe>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_TIM_OnePulse_Start+0xf0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIM_OnePulse_Start+0xbe>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_TIM_OnePulse_Start+0xf4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_OnePulse_Start+0xbe>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_TIM_OnePulse_Start+0xf8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_OnePulse_Start+0xc2>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_TIM_OnePulse_Start+0xc4>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_TIM_OnePulse_Start+0xd8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40013400 	.word	0x40013400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	40015000 	.word	0x40015000

08002c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0fd      	b.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x216>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b14      	cmp	r3, #20
 8002c9a:	f200 80f0 	bhi.w	8002e7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cf9 	.word	0x08002cf9
 8002ca8:	08002e7f 	.word	0x08002e7f
 8002cac:	08002e7f 	.word	0x08002e7f
 8002cb0:	08002e7f 	.word	0x08002e7f
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002e7f 	.word	0x08002e7f
 8002cbc:	08002e7f 	.word	0x08002e7f
 8002cc0:	08002e7f 	.word	0x08002e7f
 8002cc4:	08002d7b 	.word	0x08002d7b
 8002cc8:	08002e7f 	.word	0x08002e7f
 8002ccc:	08002e7f 	.word	0x08002e7f
 8002cd0:	08002e7f 	.word	0x08002e7f
 8002cd4:	08002dbb 	.word	0x08002dbb
 8002cd8:	08002e7f 	.word	0x08002e7f
 8002cdc:	08002e7f 	.word	0x08002e7f
 8002ce0:	08002e7f 	.word	0x08002e7f
 8002ce4:	08002dfd 	.word	0x08002dfd
 8002ce8:	08002e7f 	.word	0x08002e7f
 8002cec:	08002e7f 	.word	0x08002e7f
 8002cf0:	08002e7f 	.word	0x08002e7f
 8002cf4:	08002e3d 	.word	0x08002e3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fac4 	bl	800328c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	619a      	str	r2, [r3, #24]
      break;
 8002d36:	e0a3      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fb3e 	bl	80033c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6999      	ldr	r1, [r3, #24]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
      break;
 8002d78:	e082      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fbb1 	bl	80034e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0208 	orr.w	r2, r2, #8
 8002d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0204 	bic.w	r2, r2, #4
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]
      break;
 8002db8:	e062      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fc23 	bl	800360c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69d9      	ldr	r1, [r3, #28]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	021a      	lsls	r2, r3, #8
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	61da      	str	r2, [r3, #28]
      break;
 8002dfa:	e041      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc96 	bl	8003734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0208 	orr.w	r2, r2, #8
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e3a:	e021      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fce0 	bl	8003808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e7c:	e000      	b.n	8002e80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002e7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_ConfigClockSource+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0f5      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x204>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_TIM_ConfigClockSource+0x20c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f000 80c1 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002eec:	4a6c      	ldr	r2, [pc, #432]	; (80030a0 <HAL_TIM_ConfigClockSource+0x20c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	f200 80c6 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002ef4:	4a6b      	ldr	r2, [pc, #428]	; (80030a4 <HAL_TIM_ConfigClockSource+0x210>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f000 80b9 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002efc:	4a69      	ldr	r2, [pc, #420]	; (80030a4 <HAL_TIM_ConfigClockSource+0x210>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	f200 80be 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f04:	4a68      	ldr	r2, [pc, #416]	; (80030a8 <HAL_TIM_ConfigClockSource+0x214>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f000 80b1 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002f0c:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_TIM_ConfigClockSource+0x214>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	f200 80b6 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_TIM_ConfigClockSource+0x218>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f000 80a9 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002f1c:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_TIM_ConfigClockSource+0x218>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	f200 80ae 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f24:	4a62      	ldr	r2, [pc, #392]	; (80030b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	f000 80a1 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002f2c:	4a60      	ldr	r2, [pc, #384]	; (80030b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	f200 80a6 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f34:	4a5f      	ldr	r2, [pc, #380]	; (80030b4 <HAL_TIM_ConfigClockSource+0x220>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	f000 8099 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002f3c:	4a5d      	ldr	r2, [pc, #372]	; (80030b4 <HAL_TIM_ConfigClockSource+0x220>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	f200 809e 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002f48:	f000 8091 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002f4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002f50:	f200 8096 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f58:	f000 8089 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f60:	f200 808e 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	d03e      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
 8002f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6e:	f200 8087 	bhi.w	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f76:	f000 8085 	beq.w	8003084 <HAL_TIM_ConfigClockSource+0x1f0>
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7e:	d87f      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d01a      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x126>
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d87b      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f88:	2b60      	cmp	r3, #96	; 0x60
 8002f8a:	d050      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x19a>
 8002f8c:	2b60      	cmp	r3, #96	; 0x60
 8002f8e:	d877      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f90:	2b50      	cmp	r3, #80	; 0x50
 8002f92:	d03c      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x17a>
 8002f94:	2b50      	cmp	r3, #80	; 0x50
 8002f96:	d873      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d058      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x1ba>
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d86f      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002fa0:	2b30      	cmp	r3, #48	; 0x30
 8002fa2:	d064      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002fa4:	2b30      	cmp	r3, #48	; 0x30
 8002fa6:	d86b      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d060      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d867      	bhi.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d05c      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x1da>
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d05a      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fb8:	e062      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f000 fde1 	bl	8003b90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	609a      	str	r2, [r3, #8]
      break;
 8002fe6:	e04e      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f000 fdca 	bl	8003b90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800300a:	609a      	str	r2, [r3, #8]
      break;
 800300c:	e03b      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 fd3c 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2150      	movs	r1, #80	; 0x50
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fd95 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 800302c:	e02b      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	461a      	mov	r2, r3
 800303c:	f000 fd5b 	bl	8003af6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2160      	movs	r1, #96	; 0x60
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd85 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 800304c:	e01b      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	461a      	mov	r2, r3
 800305c:	f000 fd1c 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2140      	movs	r1, #64	; 0x40
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fd75 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 800306c:	e00b      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f000 fd6c 	bl	8003b56 <TIM_ITRx_SetConfig>
        break;
 800307e:	e002      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8003084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00100070 	.word	0x00100070
 80030a4:	00100060 	.word	0x00100060
 80030a8:	00100050 	.word	0x00100050
 80030ac:	00100040 	.word	0x00100040
 80030b0:	00100030 	.word	0x00100030
 80030b4:	00100020 	.word	0x00100020

080030b8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e031      	b.n	8003134 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fbfc 	bl	80038e0 <TIM_SlaveTimer_SetConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e018      	b.n	8003134 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003110:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003120:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a46      	ldr	r2, [pc, #280]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d017      	beq.n	8003184 <TIM_Base_SetConfig+0x48>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d013      	beq.n	8003184 <TIM_Base_SetConfig+0x48>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a43      	ldr	r2, [pc, #268]	; (800326c <TIM_Base_SetConfig+0x130>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00f      	beq.n	8003184 <TIM_Base_SetConfig+0x48>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a42      	ldr	r2, [pc, #264]	; (8003270 <TIM_Base_SetConfig+0x134>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <TIM_Base_SetConfig+0x48>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a41      	ldr	r2, [pc, #260]	; (8003274 <TIM_Base_SetConfig+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <TIM_Base_SetConfig+0x48>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a40      	ldr	r2, [pc, #256]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0x48>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3f      	ldr	r2, [pc, #252]	; (800327c <TIM_Base_SetConfig+0x140>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a33      	ldr	r2, [pc, #204]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d023      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d01f      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a30      	ldr	r2, [pc, #192]	; (800326c <TIM_Base_SetConfig+0x130>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01b      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2f      	ldr	r2, [pc, #188]	; (8003270 <TIM_Base_SetConfig+0x134>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d017      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	; (8003274 <TIM_Base_SetConfig+0x138>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	; (8003280 <TIM_Base_SetConfig+0x144>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <TIM_Base_SetConfig+0x148>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <TIM_Base_SetConfig+0x14c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <TIM_Base_SetConfig+0x140>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <TIM_Base_SetConfig+0x110>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <TIM_Base_SetConfig+0x13c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00f      	beq.n	800324c <TIM_Base_SetConfig+0x110>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <TIM_Base_SetConfig+0x144>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x110>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a13      	ldr	r2, [pc, #76]	; (8003284 <TIM_Base_SetConfig+0x148>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x110>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <TIM_Base_SetConfig+0x14c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x110>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a0d      	ldr	r2, [pc, #52]	; (800327c <TIM_Base_SetConfig+0x140>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	615a      	str	r2, [r3, #20]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40013400 	.word	0x40013400
 800327c:	40015000 	.word	0x40015000
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800

0800328c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0201 	bic.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 0302 	bic.w	r3, r3, #2
 80032d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <TIM_OC1_SetConfig+0x11c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <TIM_OC1_SetConfig+0x88>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <TIM_OC1_SetConfig+0x120>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00f      	beq.n	8003314 <TIM_OC1_SetConfig+0x88>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <TIM_OC1_SetConfig+0x124>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <TIM_OC1_SetConfig+0x88>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a2d      	ldr	r2, [pc, #180]	; (80033b4 <TIM_OC1_SetConfig+0x128>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <TIM_OC1_SetConfig+0x88>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <TIM_OC1_SetConfig+0x12c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC1_SetConfig+0x88>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <TIM_OC1_SetConfig+0x130>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0308 	bic.w	r3, r3, #8
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <TIM_OC1_SetConfig+0x11c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_OC1_SetConfig+0xd2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <TIM_OC1_SetConfig+0x120>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_OC1_SetConfig+0xd2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <TIM_OC1_SetConfig+0x124>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_OC1_SetConfig+0xd2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <TIM_OC1_SetConfig+0x128>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_OC1_SetConfig+0xd2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <TIM_OC1_SetConfig+0x12c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC1_SetConfig+0xd2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <TIM_OC1_SetConfig+0x130>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800
 80033bc:	40015000 	.word	0x40015000

080033c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0210 	bic.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0320 	bic.w	r3, r3, #32
 800340e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a2c      	ldr	r2, [pc, #176]	; (80034d0 <TIM_OC2_SetConfig+0x110>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_OC2_SetConfig+0x74>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a2b      	ldr	r2, [pc, #172]	; (80034d4 <TIM_OC2_SetConfig+0x114>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC2_SetConfig+0x74>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <TIM_OC2_SetConfig+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10d      	bne.n	8003450 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <TIM_OC2_SetConfig+0x110>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <TIM_OC2_SetConfig+0xc0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <TIM_OC2_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00f      	beq.n	8003480 <TIM_OC2_SetConfig+0xc0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <TIM_OC2_SetConfig+0x11c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_OC2_SetConfig+0xc0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <TIM_OC2_SetConfig+0x120>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <TIM_OC2_SetConfig+0xc0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <TIM_OC2_SetConfig+0x124>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_OC2_SetConfig+0xc0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <TIM_OC2_SetConfig+0x118>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d113      	bne.n	80034a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	621a      	str	r2, [r3, #32]
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40015000 	.word	0x40015000
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <TIM_OC3_SetConfig+0x10c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_OC3_SetConfig+0x72>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <TIM_OC3_SetConfig+0x110>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_OC3_SetConfig+0x72>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_OC3_SetConfig+0x114>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <TIM_OC3_SetConfig+0x10c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <TIM_OC3_SetConfig+0xbe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <TIM_OC3_SetConfig+0x110>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_OC3_SetConfig+0xbe>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <TIM_OC3_SetConfig+0x118>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_OC3_SetConfig+0xbe>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <TIM_OC3_SetConfig+0x11c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_OC3_SetConfig+0xbe>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <TIM_OC3_SetConfig+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC3_SetConfig+0xbe>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <TIM_OC3_SetConfig+0x114>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40013400 	.word	0x40013400
 80035fc:	40015000 	.word	0x40015000
 8003600:	40014000 	.word	0x40014000
 8003604:	40014400 	.word	0x40014400
 8003608:	40014800 	.word	0x40014800

0800360c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800365a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a2c      	ldr	r2, [pc, #176]	; (800371c <TIM_OC4_SetConfig+0x110>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_OC4_SetConfig+0x74>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a2b      	ldr	r2, [pc, #172]	; (8003720 <TIM_OC4_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_OC4_SetConfig+0x74>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a2a      	ldr	r2, [pc, #168]	; (8003724 <TIM_OC4_SetConfig+0x118>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10d      	bne.n	800369c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	031b      	lsls	r3, r3, #12
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800369a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <TIM_OC4_SetConfig+0x110>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <TIM_OC4_SetConfig+0xc0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <TIM_OC4_SetConfig+0x114>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00f      	beq.n	80036cc <TIM_OC4_SetConfig+0xc0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <TIM_OC4_SetConfig+0x11c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00b      	beq.n	80036cc <TIM_OC4_SetConfig+0xc0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a1d      	ldr	r2, [pc, #116]	; (800372c <TIM_OC4_SetConfig+0x120>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_OC4_SetConfig+0xc0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <TIM_OC4_SetConfig+0x124>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC4_SetConfig+0xc0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <TIM_OC4_SetConfig+0x118>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d113      	bne.n	80036f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40013400 	.word	0x40013400
 8003724:	40015000 	.word	0x40015000
 8003728:	40014000 	.word	0x40014000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800

08003734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <TIM_OC5_SetConfig+0xbc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <TIM_OC5_SetConfig+0x82>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <TIM_OC5_SetConfig+0xc0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_OC5_SetConfig+0x82>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <TIM_OC5_SetConfig+0xc4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_OC5_SetConfig+0x82>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <TIM_OC5_SetConfig+0xc8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_OC5_SetConfig+0x82>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <TIM_OC5_SetConfig+0xcc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC5_SetConfig+0x82>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <TIM_OC5_SetConfig+0xd0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d109      	bne.n	80037ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	621a      	str	r2, [r3, #32]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40013400 	.word	0x40013400
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800
 8003804:	40015000 	.word	0x40015000

08003808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800384e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	051b      	lsls	r3, r3, #20
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <TIM_OC6_SetConfig+0xc0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <TIM_OC6_SetConfig+0x84>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <TIM_OC6_SetConfig+0xc4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00f      	beq.n	800388c <TIM_OC6_SetConfig+0x84>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <TIM_OC6_SetConfig+0xc8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_OC6_SetConfig+0x84>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <TIM_OC6_SetConfig+0xcc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_OC6_SetConfig+0x84>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <TIM_OC6_SetConfig+0xd0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_OC6_SetConfig+0x84>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <TIM_OC6_SetConfig+0xd4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d109      	bne.n	80038a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40013400 	.word	0x40013400
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40014400 	.word	0x40014400
 80038d8:	40014800 	.word	0x40014800
 80038dc:	40015000 	.word	0x40015000

080038e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390e:	f023 0307 	bic.w	r3, r3, #7
 8003912:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <TIM_SlaveTimer_SetConfig+0x1a0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	f000 809e 	beq.w	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003932:	4a53      	ldr	r2, [pc, #332]	; (8003a80 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	f200 809c 	bhi.w	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 800393a:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	f000 8096 	beq.w	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003942:	4a50      	ldr	r2, [pc, #320]	; (8003a84 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	f200 8094 	bhi.w	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 800394a:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	f000 808e 	beq.w	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003952:	4a4d      	ldr	r2, [pc, #308]	; (8003a88 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	f200 808c 	bhi.w	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 800395a:	4a4c      	ldr	r2, [pc, #304]	; (8003a8c <TIM_SlaveTimer_SetConfig+0x1ac>)
 800395c:	4293      	cmp	r3, r2
 800395e:	f000 8086 	beq.w	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003962:	4a4a      	ldr	r2, [pc, #296]	; (8003a8c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f200 8084 	bhi.w	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 800396a:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d07e      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003970:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d87d      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 8003976:	4a47      	ldr	r2, [pc, #284]	; (8003a94 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d078      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 800397c:	4a45      	ldr	r2, [pc, #276]	; (8003a94 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d877      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 8003982:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003986:	d072      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003988:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800398c:	d871      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d06c      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 8003994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003998:	d86b      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 800399a:	2b70      	cmp	r3, #112	; 0x70
 800399c:	d01a      	beq.n	80039d4 <TIM_SlaveTimer_SetConfig+0xf4>
 800399e:	2b70      	cmp	r3, #112	; 0x70
 80039a0:	d867      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 80039a2:	2b60      	cmp	r3, #96	; 0x60
 80039a4:	d059      	beq.n	8003a5a <TIM_SlaveTimer_SetConfig+0x17a>
 80039a6:	2b60      	cmp	r3, #96	; 0x60
 80039a8:	d863      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 80039aa:	2b50      	cmp	r3, #80	; 0x50
 80039ac:	d04b      	beq.n	8003a46 <TIM_SlaveTimer_SetConfig+0x166>
 80039ae:	2b50      	cmp	r3, #80	; 0x50
 80039b0:	d85f      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d019      	beq.n	80039ea <TIM_SlaveTimer_SetConfig+0x10a>
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d85b      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 80039ba:	2b30      	cmp	r3, #48	; 0x30
 80039bc:	d057      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 80039be:	2b30      	cmp	r3, #48	; 0x30
 80039c0:	d857      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d053      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d853      	bhi.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04f      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d04d      	beq.n	8003a6e <TIM_SlaveTimer_SetConfig+0x18e>
        assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
        break;
      }

    default:
      break;
 80039d2:	e04e      	b.n	8003a72 <TIM_SlaveTimer_SetConfig+0x192>
      TIM_ETR_SetConfig(htim->Instance,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f000 f8d4 	bl	8003b90 <TIM_ETR_SetConfig>
      break;
 80039e8:	e044      	b.n	8003a74 <TIM_SlaveTimer_SetConfig+0x194>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d004      	beq.n	80039fc <TIM_SlaveTimer_SetConfig+0x11c>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80039fa:	d101      	bne.n	8003a00 <TIM_SlaveTimer_SetConfig+0x120>
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e03a      	b.n	8003a76 <TIM_SlaveTimer_SetConfig+0x196>
      tmpccer = htim->Instance->CCER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a26:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	621a      	str	r2, [r3, #32]
      break;
 8003a44:	e016      	b.n	8003a74 <TIM_SlaveTimer_SetConfig+0x194>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6899      	ldr	r1, [r3, #8]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 f820 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      break;
 8003a58:	e00c      	b.n	8003a74 <TIM_SlaveTimer_SetConfig+0x194>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f000 f845 	bl	8003af6 <TIM_TI2_ConfigInputStage>
      break;
 8003a6c:	e002      	b.n	8003a74 <TIM_SlaveTimer_SetConfig+0x194>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <TIM_SlaveTimer_SetConfig+0x194>
      break;
 8003a72:	bf00      	nop
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	00100070 	.word	0x00100070
 8003a84:	00100060 	.word	0x00100060
 8003a88:	00100050 	.word	0x00100050
 8003a8c:	00100040 	.word	0x00100040
 8003a90:	00100030 	.word	0x00100030
 8003a94:	00100020 	.word	0x00100020

08003a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0201 	bic.w	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 030a 	bic.w	r3, r3, #10
 8003ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0210 	bic.w	r2, r3, #16
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	031b      	lsls	r3, r3, #12
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1a      	ldr	r2, [r3, #32]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e074      	b.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a33      	ldr	r2, [pc, #204]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a31      	ldr	r2, [pc, #196]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10c      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40015000 	.word	0x40015000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40014000 	.word	0x40014000

08003d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e096      	b.n	8003e92 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2f      	ldr	r2, [pc, #188]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2c      	ldr	r2, [pc, #176]	; (8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d106      	bne.n	8003e0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d12b      	bne.n	8003e80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	051b      	lsls	r3, r3, #20
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d106      	bne.n	8003e80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40015000 	.word	0x40015000

08003eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e042      	b.n	8003f44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc fdbd 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2224      	movs	r2, #36	; 0x24
 8003eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f82c 	bl	8003f4c <UART_SetConfig>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e022      	b.n	8003f44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 faea 	bl	80044e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fb71 	bl	8004624 <UART_CheckIdleState>
 8003f42:	4603      	mov	r3, r0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	b5b0      	push	{r4, r5, r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4bb1      	ldr	r3, [pc, #708]	; (800423c <UART_SetConfig+0x2f0>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	69f9      	ldr	r1, [r7, #28]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4aa6      	ldr	r2, [pc, #664]	; (8004240 <UART_SetConfig+0x2f4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	69f9      	ldr	r1, [r7, #28]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f023 010f 	bic.w	r1, r3, #15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a97      	ldr	r2, [pc, #604]	; (8004244 <UART_SetConfig+0x2f8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d120      	bne.n	800402e <UART_SetConfig+0xe2>
 8003fec:	4b96      	ldr	r3, [pc, #600]	; (8004248 <UART_SetConfig+0x2fc>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d816      	bhi.n	8004028 <UART_SetConfig+0xdc>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0xb4>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004011 	.word	0x08004011
 8004004:	0800401d 	.word	0x0800401d
 8004008:	08004017 	.word	0x08004017
 800400c:	08004023 	.word	0x08004023
 8004010:	2301      	movs	r3, #1
 8004012:	76fb      	strb	r3, [r7, #27]
 8004014:	e0e7      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004016:	2302      	movs	r3, #2
 8004018:	76fb      	strb	r3, [r7, #27]
 800401a:	e0e4      	b.n	80041e6 <UART_SetConfig+0x29a>
 800401c:	2304      	movs	r3, #4
 800401e:	76fb      	strb	r3, [r7, #27]
 8004020:	e0e1      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004022:	2308      	movs	r3, #8
 8004024:	76fb      	strb	r3, [r7, #27]
 8004026:	e0de      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004028:	2310      	movs	r3, #16
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	e0db      	b.n	80041e6 <UART_SetConfig+0x29a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a86      	ldr	r2, [pc, #536]	; (800424c <UART_SetConfig+0x300>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d132      	bne.n	800409e <UART_SetConfig+0x152>
 8004038:	4b83      	ldr	r3, [pc, #524]	; (8004248 <UART_SetConfig+0x2fc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d828      	bhi.n	8004098 <UART_SetConfig+0x14c>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x100>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	08004081 	.word	0x08004081
 8004050:	08004099 	.word	0x08004099
 8004054:	08004099 	.word	0x08004099
 8004058:	08004099 	.word	0x08004099
 800405c:	0800408d 	.word	0x0800408d
 8004060:	08004099 	.word	0x08004099
 8004064:	08004099 	.word	0x08004099
 8004068:	08004099 	.word	0x08004099
 800406c:	08004087 	.word	0x08004087
 8004070:	08004099 	.word	0x08004099
 8004074:	08004099 	.word	0x08004099
 8004078:	08004099 	.word	0x08004099
 800407c:	08004093 	.word	0x08004093
 8004080:	2300      	movs	r3, #0
 8004082:	76fb      	strb	r3, [r7, #27]
 8004084:	e0af      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004086:	2302      	movs	r3, #2
 8004088:	76fb      	strb	r3, [r7, #27]
 800408a:	e0ac      	b.n	80041e6 <UART_SetConfig+0x29a>
 800408c:	2304      	movs	r3, #4
 800408e:	76fb      	strb	r3, [r7, #27]
 8004090:	e0a9      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004092:	2308      	movs	r3, #8
 8004094:	76fb      	strb	r3, [r7, #27]
 8004096:	e0a6      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004098:	2310      	movs	r3, #16
 800409a:	76fb      	strb	r3, [r7, #27]
 800409c:	e0a3      	b.n	80041e6 <UART_SetConfig+0x29a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6b      	ldr	r2, [pc, #428]	; (8004250 <UART_SetConfig+0x304>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d120      	bne.n	80040ea <UART_SetConfig+0x19e>
 80040a8:	4b67      	ldr	r3, [pc, #412]	; (8004248 <UART_SetConfig+0x2fc>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d013      	beq.n	80040de <UART_SetConfig+0x192>
 80040b6:	2b30      	cmp	r3, #48	; 0x30
 80040b8:	d814      	bhi.n	80040e4 <UART_SetConfig+0x198>
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d009      	beq.n	80040d2 <UART_SetConfig+0x186>
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d810      	bhi.n	80040e4 <UART_SetConfig+0x198>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <UART_SetConfig+0x180>
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d006      	beq.n	80040d8 <UART_SetConfig+0x18c>
 80040ca:	e00b      	b.n	80040e4 <UART_SetConfig+0x198>
 80040cc:	2300      	movs	r3, #0
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e089      	b.n	80041e6 <UART_SetConfig+0x29a>
 80040d2:	2302      	movs	r3, #2
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e086      	b.n	80041e6 <UART_SetConfig+0x29a>
 80040d8:	2304      	movs	r3, #4
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e083      	b.n	80041e6 <UART_SetConfig+0x29a>
 80040de:	2308      	movs	r3, #8
 80040e0:	76fb      	strb	r3, [r7, #27]
 80040e2:	e080      	b.n	80041e6 <UART_SetConfig+0x29a>
 80040e4:	2310      	movs	r3, #16
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	e07d      	b.n	80041e6 <UART_SetConfig+0x29a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a59      	ldr	r2, [pc, #356]	; (8004254 <UART_SetConfig+0x308>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d120      	bne.n	8004136 <UART_SetConfig+0x1ea>
 80040f4:	4b54      	ldr	r3, [pc, #336]	; (8004248 <UART_SetConfig+0x2fc>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004100:	d013      	beq.n	800412a <UART_SetConfig+0x1de>
 8004102:	2bc0      	cmp	r3, #192	; 0xc0
 8004104:	d814      	bhi.n	8004130 <UART_SetConfig+0x1e4>
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d009      	beq.n	800411e <UART_SetConfig+0x1d2>
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d810      	bhi.n	8004130 <UART_SetConfig+0x1e4>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <UART_SetConfig+0x1cc>
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d006      	beq.n	8004124 <UART_SetConfig+0x1d8>
 8004116:	e00b      	b.n	8004130 <UART_SetConfig+0x1e4>
 8004118:	2300      	movs	r3, #0
 800411a:	76fb      	strb	r3, [r7, #27]
 800411c:	e063      	b.n	80041e6 <UART_SetConfig+0x29a>
 800411e:	2302      	movs	r3, #2
 8004120:	76fb      	strb	r3, [r7, #27]
 8004122:	e060      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004124:	2304      	movs	r3, #4
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	e05d      	b.n	80041e6 <UART_SetConfig+0x29a>
 800412a:	2308      	movs	r3, #8
 800412c:	76fb      	strb	r3, [r7, #27]
 800412e:	e05a      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004130:	2310      	movs	r3, #16
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e057      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a47      	ldr	r2, [pc, #284]	; (8004258 <UART_SetConfig+0x30c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d125      	bne.n	800418c <UART_SetConfig+0x240>
 8004140:	4b41      	ldr	r3, [pc, #260]	; (8004248 <UART_SetConfig+0x2fc>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414e:	d017      	beq.n	8004180 <UART_SetConfig+0x234>
 8004150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004154:	d817      	bhi.n	8004186 <UART_SetConfig+0x23a>
 8004156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415a:	d00b      	beq.n	8004174 <UART_SetConfig+0x228>
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d811      	bhi.n	8004186 <UART_SetConfig+0x23a>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <UART_SetConfig+0x222>
 8004166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416a:	d006      	beq.n	800417a <UART_SetConfig+0x22e>
 800416c:	e00b      	b.n	8004186 <UART_SetConfig+0x23a>
 800416e:	2300      	movs	r3, #0
 8004170:	76fb      	strb	r3, [r7, #27]
 8004172:	e038      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004174:	2302      	movs	r3, #2
 8004176:	76fb      	strb	r3, [r7, #27]
 8004178:	e035      	b.n	80041e6 <UART_SetConfig+0x29a>
 800417a:	2304      	movs	r3, #4
 800417c:	76fb      	strb	r3, [r7, #27]
 800417e:	e032      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004180:	2308      	movs	r3, #8
 8004182:	76fb      	strb	r3, [r7, #27]
 8004184:	e02f      	b.n	80041e6 <UART_SetConfig+0x29a>
 8004186:	2310      	movs	r3, #16
 8004188:	76fb      	strb	r3, [r7, #27]
 800418a:	e02c      	b.n	80041e6 <UART_SetConfig+0x29a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <UART_SetConfig+0x2f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d125      	bne.n	80041e2 <UART_SetConfig+0x296>
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <UART_SetConfig+0x2fc>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a4:	d017      	beq.n	80041d6 <UART_SetConfig+0x28a>
 80041a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041aa:	d817      	bhi.n	80041dc <UART_SetConfig+0x290>
 80041ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b0:	d00b      	beq.n	80041ca <UART_SetConfig+0x27e>
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b6:	d811      	bhi.n	80041dc <UART_SetConfig+0x290>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <UART_SetConfig+0x278>
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d006      	beq.n	80041d0 <UART_SetConfig+0x284>
 80041c2:	e00b      	b.n	80041dc <UART_SetConfig+0x290>
 80041c4:	2300      	movs	r3, #0
 80041c6:	76fb      	strb	r3, [r7, #27]
 80041c8:	e00d      	b.n	80041e6 <UART_SetConfig+0x29a>
 80041ca:	2302      	movs	r3, #2
 80041cc:	76fb      	strb	r3, [r7, #27]
 80041ce:	e00a      	b.n	80041e6 <UART_SetConfig+0x29a>
 80041d0:	2304      	movs	r3, #4
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e007      	b.n	80041e6 <UART_SetConfig+0x29a>
 80041d6:	2308      	movs	r3, #8
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e004      	b.n	80041e6 <UART_SetConfig+0x29a>
 80041dc:	2310      	movs	r3, #16
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e001      	b.n	80041e6 <UART_SetConfig+0x29a>
 80041e2:	2310      	movs	r3, #16
 80041e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <UART_SetConfig+0x2f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f040 809f 	bne.w	8004330 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041f2:	7efb      	ldrb	r3, [r7, #27]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d837      	bhi.n	8004268 <UART_SetConfig+0x31c>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <UART_SetConfig+0x2b4>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004225 	.word	0x08004225
 8004204:	08004269 	.word	0x08004269
 8004208:	0800422d 	.word	0x0800422d
 800420c:	08004269 	.word	0x08004269
 8004210:	08004233 	.word	0x08004233
 8004214:	08004269 	.word	0x08004269
 8004218:	08004269 	.word	0x08004269
 800421c:	08004269 	.word	0x08004269
 8004220:	08004261 	.word	0x08004261
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004224:	f7fe f8d8 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8004228:	6178      	str	r0, [r7, #20]
        break;
 800422a:	e022      	b.n	8004272 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <UART_SetConfig+0x310>)
 800422e:	617b      	str	r3, [r7, #20]
        break;
 8004230:	e01f      	b.n	8004272 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004232:	f7fe f863 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8004236:	6178      	str	r0, [r7, #20]
        break;
 8004238:	e01b      	b.n	8004272 <UART_SetConfig+0x326>
 800423a:	bf00      	nop
 800423c:	cfff69f3 	.word	0xcfff69f3
 8004240:	40008000 	.word	0x40008000
 8004244:	40013800 	.word	0x40013800
 8004248:	40021000 	.word	0x40021000
 800424c:	40004400 	.word	0x40004400
 8004250:	40004800 	.word	0x40004800
 8004254:	40004c00 	.word	0x40004c00
 8004258:	40005000 	.word	0x40005000
 800425c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004264:	617b      	str	r3, [r7, #20]
        break;
 8004266:	e004      	b.n	8004272 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	76bb      	strb	r3, [r7, #26]
        break;
 8004270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 811b 	beq.w	80044b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	4a96      	ldr	r2, [pc, #600]	; (80044d8 <UART_SetConfig+0x58c>)
 8004280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004284:	461a      	mov	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	fbb3 f3f2 	udiv	r3, r3, r2
 800428c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	d305      	bcc.n	80042aa <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d902      	bls.n	80042b0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	76bb      	strb	r3, [r7, #26]
 80042ae:	e0ff      	b.n	80044b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	4a86      	ldr	r2, [pc, #536]	; (80044d8 <UART_SetConfig+0x58c>)
 80042be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f7fb ffa6 	bl	8000218 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	020b      	lsls	r3, r1, #8
 80042de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042e2:	0202      	lsls	r2, r0, #8
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	6849      	ldr	r1, [r1, #4]
 80042e8:	0849      	lsrs	r1, r1, #1
 80042ea:	4608      	mov	r0, r1
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	1814      	adds	r4, r2, r0
 80042f2:	eb43 0501 	adc.w	r5, r3, r1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fb ff88 	bl	8000218 <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4613      	mov	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004316:	d308      	bcc.n	800432a <UART_SetConfig+0x3de>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431e:	d204      	bcs.n	800432a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e0c2      	b.n	80044b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	76bb      	strb	r3, [r7, #26]
 800432e:	e0bf      	b.n	80044b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d165      	bne.n	8004406 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800433a:	7efb      	ldrb	r3, [r7, #27]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d828      	bhi.n	8004392 <UART_SetConfig+0x446>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x3fc>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	08004393 	.word	0x08004393
 8004358:	08004383 	.word	0x08004383
 800435c:	08004393 	.word	0x08004393
 8004360:	08004393 	.word	0x08004393
 8004364:	08004393 	.word	0x08004393
 8004368:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe f834 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8004370:	6178      	str	r0, [r7, #20]
        break;
 8004372:	e013      	b.n	800439c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe f846 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8004378:	6178      	str	r0, [r7, #20]
        break;
 800437a:	e00f      	b.n	800439c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437c:	4b57      	ldr	r3, [pc, #348]	; (80044dc <UART_SetConfig+0x590>)
 800437e:	617b      	str	r3, [r7, #20]
        break;
 8004380:	e00c      	b.n	800439c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004382:	f7fd ffbb 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8004386:	6178      	str	r0, [r7, #20]
        break;
 8004388:	e008      	b.n	800439c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	617b      	str	r3, [r7, #20]
        break;
 8004390:	e004      	b.n	800439c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	76bb      	strb	r3, [r7, #26]
        break;
 800439a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8086 	beq.w	80044b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	4a4b      	ldr	r2, [pc, #300]	; (80044d8 <UART_SetConfig+0x58c>)
 80043aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ae:	461a      	mov	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b6:	005a      	lsls	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d916      	bls.n	8004400 <UART_SetConfig+0x4b4>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d212      	bcs.n	8004400 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	89fa      	ldrh	r2, [r7, #14]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	e057      	b.n	80044b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	76bb      	strb	r3, [r7, #26]
 8004404:	e054      	b.n	80044b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004406:	7efb      	ldrb	r3, [r7, #27]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d828      	bhi.n	800445e <UART_SetConfig+0x512>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x4c8>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004439 	.word	0x08004439
 8004418:	08004441 	.word	0x08004441
 800441c:	08004449 	.word	0x08004449
 8004420:	0800445f 	.word	0x0800445f
 8004424:	0800444f 	.word	0x0800444f
 8004428:	0800445f 	.word	0x0800445f
 800442c:	0800445f 	.word	0x0800445f
 8004430:	0800445f 	.word	0x0800445f
 8004434:	08004457 	.word	0x08004457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fd ffce 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 800443c:	6178      	str	r0, [r7, #20]
        break;
 800443e:	e013      	b.n	8004468 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fd ffe0 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8004444:	6178      	str	r0, [r7, #20]
        break;
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <UART_SetConfig+0x590>)
 800444a:	617b      	str	r3, [r7, #20]
        break;
 800444c:	e00c      	b.n	8004468 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444e:	f7fd ff55 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8004452:	6178      	str	r0, [r7, #20]
        break;
 8004454:	e008      	b.n	8004468 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	617b      	str	r3, [r7, #20]
        break;
 800445c:	e004      	b.n	8004468 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	76bb      	strb	r3, [r7, #26]
        break;
 8004466:	bf00      	nop
    }

    if (pclk != 0U)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d020      	beq.n	80044b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <UART_SetConfig+0x58c>)
 8004474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004478:	461a      	mov	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	441a      	add	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	b29b      	uxth	r3, r3
 8004492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d908      	bls.n	80044ac <UART_SetConfig+0x560>
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d204      	bcs.n	80044ac <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	e001      	b.n	80044b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bdb0      	pop	{r4, r5, r7, pc}
 80044d6:	bf00      	nop
 80044d8:	08004a48 	.word	0x08004a48
 80044dc:	00f42400 	.word	0x00f42400

080044e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045de:	d10a      	bne.n	80045f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af02      	add	r7, sp, #8
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004634:	f7fc fb9c 	bl	8000d70 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b08      	cmp	r3, #8
 8004646:	d10e      	bne.n	8004666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f82f 	bl	80046ba <UART_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e025      	b.n	80046b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d10e      	bne.n	8004692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f819 	bl	80046ba <UART_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e00f      	b.n	80046b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ca:	e062      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d05e      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fc fb4c 	bl	8000d70 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <UART_WaitOnFlagUntilTimeout+0x30>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e045      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02e      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004742:	d126      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800475c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e00f      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d08d      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b085      	sub	sp, #20
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e027      	b.n	8004820 <HAL_UARTEx_DisableFifoMode+0x66>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	; 0x24
 80047dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004840:	2302      	movs	r3, #2
 8004842:	e02d      	b.n	80048a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f84f 	bl	8004924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048bc:	2302      	movs	r3, #2
 80048be:	e02d      	b.n	800491c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f811 	bl	8004924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004930:	2b00      	cmp	r3, #0
 8004932:	d108      	bne.n	8004946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004944:	e031      	b.n	80049aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004946:	2308      	movs	r3, #8
 8004948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800494a:	2308      	movs	r3, #8
 800494c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	0e5b      	lsrs	r3, r3, #25
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	0f5b      	lsrs	r3, r3, #29
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	7b3a      	ldrb	r2, [r7, #12]
 8004972:	4911      	ldr	r1, [pc, #68]	; (80049b8 <UARTEx_SetNbDataToProcess+0x94>)
 8004974:	5c8a      	ldrb	r2, [r1, r2]
 8004976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800497a:	7b3a      	ldrb	r2, [r7, #12]
 800497c:	490f      	ldr	r1, [pc, #60]	; (80049bc <UARTEx_SetNbDataToProcess+0x98>)
 800497e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004980:	fb93 f3f2 	sdiv	r3, r3, r2
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	7b7a      	ldrb	r2, [r7, #13]
 8004990:	4909      	ldr	r1, [pc, #36]	; (80049b8 <UARTEx_SetNbDataToProcess+0x94>)
 8004992:	5c8a      	ldrb	r2, [r1, r2]
 8004994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004998:	7b7a      	ldrb	r2, [r7, #13]
 800499a:	4908      	ldr	r1, [pc, #32]	; (80049bc <UARTEx_SetNbDataToProcess+0x98>)
 800499c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800499e:	fb93 f3f2 	sdiv	r3, r3, r2
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	08004a60 	.word	0x08004a60
 80049bc:	08004a68 	.word	0x08004a68

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	; (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	; (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	; (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 f820 	bl	8004a18 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08004a78 	.word	0x08004a78
 80049fc:	08004a78 	.word	0x08004a78
 8004a00:	08004a78 	.word	0x08004a78
 8004a04:	08004a7c 	.word	0x08004a7c

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
